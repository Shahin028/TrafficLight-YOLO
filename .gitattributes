import tkinter as tk
import threading
import time
import cv2
from ultralytics import YOLO
from PIL import Image, ImageTk

# Load YOLOv8 model
model = YOLO("yolov8n.pt")  # Use yolov8n.pt (nano) for faster inference

# Initialize webcam
cap = cv2.VideoCapture(0)
if not cap.isOpened():
    print("Error: Unable to access the camera")
    exit()

class TrafficLight:
    def __init__(self, parent, position):
        """Initialize a traffic light on a given canvas."""
        self.canvas = tk.Canvas(parent, width=150, height=200, bd=0, highlightthickness=0)
        self.canvas.grid(row=0, column=position, padx=10, pady=20)

        # Create a border for the traffic light
        self.border = self.canvas.create_rectangle(0, 0, 150, 200, outline="gold", width=5)

        # Create lights (circle shape)
        self.red_light = self.canvas.create_oval(50, 10, 100, 60, fill="gray", outline="black", width=3)
        self.yellow_light = self.canvas.create_oval(50, 70, 100, 120, fill="gray", outline="black", width=3)
        self.green_light = self.canvas.create_oval(50, 130, 100, 180, fill="gray", outline="black", width=3)
        
        # Status text
        self.status_text = self.canvas.create_text(75, 100, text="Traffic Light", fill="white", font=("Arial", 10))
        self.timer_text = self.canvas.create_text(75, 190, text="", fill="black", font=("Arial", 10))

    def update_light(self, color, time_remaining):
        """Updates the traffic light color and shows the timer."""
        self.canvas.itemconfig(self.red_light, fill="gray")
        self.canvas.itemconfig(self.yellow_light, fill="gray")
        self.canvas.itemconfig(self.green_light, fill="gray")
        
        if color == "red":
            self.canvas.itemconfig(self.red_light, fill="red")
            self.canvas.itemconfig(self.status_text, text="STOP", fill="white")
        elif color == "yellow":
            self.canvas.itemconfig(self.yellow_light, fill="yellow")
            self.canvas.itemconfig(self.status_text, text="SLOW DOWN", fill="black")
        elif color == "green":
            self.canvas.itemconfig(self.green_light, fill="green")
            self.canvas.itemconfig(self.status_text, text="GO", fill="white")
        
        # Set the timer text color to black
        self.canvas.itemconfig(self.timer_text, text=f"{time_remaining:.1f} sec", fill="black")

class TrafficLightApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Four Traffic Light Simulation with Live Camera")
        self.root.geometry("1200x600")
        self.root.configure(bg="#1E2A36")
        
        # Create a frame for the controls
        self.control_frame = tk.Frame(self.root, bg="#2E3B4E", bd=5, relief=tk.RAISED)
        self.control_frame.pack(side=tk.TOP, pady=20, fill=tk.X)
        
        # Create the traffic lights in a grid layout
        self.light_frame = tk.Frame(self.root, bg="#1E2A36")
        self.light_frame.pack(side=tk.TOP, pady=10)
        self.traffic_lights = [TrafficLight(self.light_frame, i) for i in range(4)]
        
        # Create camera feed display at the bottom
        self.camera_label = tk.Label(self.root)
        self.camera_label.pack(side=tk.BOTTOM, pady=20)
        
        # Vehicle count label
        self.vehicle_count_label = tk.Label(self.control_frame, text="Vehicles: 0", bg="#2E3B4E", fg="white", font=("Arial", 14))
        self.vehicle_count_label.grid(row=0, column=0, padx=10, pady=10)
        
        # "Run" button with better styling
        self.run_button = tk.Button(self.control_frame, text="Start Simulation", command=self.run_sequence, bg="#28a745", fg="white", font=("Arial", 14), width=20)
        self.run_button.grid(row=0, column=1, padx=10, pady=10)
        
        # "Stop" button with better styling
        self.stop_button = tk.Button(self.control_frame, text="Stop Simulation", command=self.stop_sequence, bg="#dc3545", fg="white", font=("Arial", 14), width=20)
        self.stop_button.grid(row=0, column=2, padx=10, pady=10)
        self.stop_button.config(state=tk.DISABLED)  # Initially disabled
        
        # Start updating the camera feed
        self.update_camera()
        
        # Flag to stop simulation
        self.simulation_running = False

    def update_camera(self):
        """Fetches frames from the camera, processes them, and updates the GUI."""
        ret, frame = cap.read()
        if ret:
            # Detect vehicles and draw bounding boxes
            vehicle_count = 0
            results = model(frame, stream=True)
            for result in results:
                for box in result.boxes:
                    label = model.names[int(box.cls[0])]
                    if label in ["car", "truck", "bus", "motorbike"]:
                        vehicle_count += 1
                        # Draw bounding box and label
                        x1, y1, x2, y2 = map(int, box.xyxy[0])
                        cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 255, 0), 2)
                        cv2.putText(frame, label, (x1, y1 - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.9, (0, 255, 0), 2)
            
            # Update vehicle count label
            self.vehicle_count_label.config(text=f"Vehicles: {vehicle_count}")
            
            # Convert frame to RGB and resize
            frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
            frame = cv2.resize(frame, (500, 300))
            
            # Convert to Tkinter-compatible image
            img = Image.fromarray(frame)
            img_tk = ImageTk.PhotoImage(image=img)
            
            # Update camera feed label
            self.camera_label.config(image=img_tk)
            self.camera_label.image = img_tk  # Keep a reference to avoid garbage collection
        
        # Schedule next frame update
        self.root.after(10, self.update_camera)

    def run_sequence(self):
        """Runs the traffic light sequence."""
        self.run_button.config(state=tk.DISABLED)  # Disable the button to prevent multiple clicks
        self.stop_button.config(state=tk.NORMAL)  # Enable stop button
        self.simulation_running = True
        threading.Thread(target=self.run_traffic_lights, daemon=True).start()
    
    def stop_sequence(self):
        """Stops the traffic light sequence."""
        self.simulation_running = False
        self.run_button.config(state=tk.NORMAL)  # Re-enable the start button
        self.stop_button.config(state=tk.DISABLED)  # Disable stop button

    def run_traffic_lights(self):
        """Sequentially runs traffic lights based on vehicle count."""
        self.current_light = 0
        while self.simulation_running:
            # Detect vehicles and calculate green time
            ret, frame = cap.read()
            if not ret:
                continue
            
            vehicle_count = 0
            results = model(frame, stream=True)
            for result in results:
                for box in result.boxes:
                    label = model.names[int(box.cls[0])]
                    if label in ["car", "truck", "bus", "motorbike"]:
                        vehicle_count += 1
            
            green_time = max(vehicle_count * 3, 2)  # Each vehicle = 3 sec, min 2 sec
            yellow_time = 4  # Fixed yellow light duration
            
            # Turn all lights red first
            for light in self.traffic_lights:
                light.update_light("red", 0)
            
            # Turn on current traffic light
            for t in range(int(green_time * 10), 0, -1):
                if not self.simulation_running:  # Check if simulation was stopped
                    break
                self.traffic_lights[self.current_light].update_light("green", t / 10)
                time.sleep(0.1)
            
            for t in range(yellow_time * 10, 0, -1):
                if not self.simulation_running:  # Check if simulation was stopped
                    break
                self.traffic_lights[self.current_light].update_light("yellow", t / 10)
                time.sleep(0.1)
            
            self.traffic_lights[self.current_light].update_light("red", 0)
            time.sleep(1)
            
            # Move to next traffic light
            self.current_light = (self.current_light + 1) % 4
            if self.current_light == 0:
                self.run_button.config(state=tk.NORMAL)  # Re-enable the start button after one cycle
                self.stop_button.config(state=tk.DISABLED)  # Disable stop button after one cycle

if __name__ == "__main__":
    root = tk.Tk()
    app = TrafficLightApp(root)
    root.mainloop()
    cap.release()
    cv2.destroyAllWindows()
